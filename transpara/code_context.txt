// File: src/components/AppBar/ProfileMenu.tsx
// src/components/AppBar/ProfileMenu.tsx
import React, { useRef, ChangeEvent } from "react";
import { Menu, MenuItem } from "@mui/material";
import { auth } from "../../firebase";
import {
  getStorage,
  ref,
  uploadBytesResumable,
  getDownloadURL,
} from "firebase/storage";
import { updateProfile } from "firebase/auth";

interface ProfileMenuProps {
  anchorEl: HTMLElement | null;
  isOpen: boolean;
  onClose: () => void;
  onLogout: () => Promise<void>;
}

export const ProfileMenu: React.FC<ProfileMenuProps> = ({
  anchorEl,
  isOpen,
  onClose,
  onLogout,
}) => {
  // We'll trigger this hidden file input from a menu item
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Handle the file selection
  const handleFileChange = async (event: ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files?.[0]) return;

    const file = event.target.files[0];
    try {
      // 1) Upload to Firebase Storage
      const storage = getStorage();
      // Place the file under a folder named after the user's UID
      const storageRef = ref(
        storage,
        `profilePhotos/${auth.currentUser?.uid}/${file.name}`
      );
      const uploadTask = uploadBytesResumable(storageRef, file);

      uploadTask.on(
        "state_changed",
        // Optional: track progress here
        () => {
          // Optional: track progress here
        },
        (error) => {
          console.error("Upload error:", error);
        },
        async () => {
          // 2) Get the download URL
          const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);

          // 3) Update the userâ€™s photoURL in Firebase Auth
          if (auth.currentUser) {
            await updateProfile(auth.currentUser, {
              photoURL: downloadURL,
            });
          }

          // Optionally close the menu
          onClose();
        }
      );
    } catch (error) {
      console.error("Error uploading file:", error);
    }
  };

  // Trigger the hidden file input
  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <>
      <Menu
        anchorEl={anchorEl}
        id="primary-search-account-menu"
        keepMounted
        open={isOpen}
        onClose={onClose}
        anchorOrigin={{ vertical: "top", horizontal: "right" }}
        transformOrigin={{ vertical: "top", horizontal: "right" }}
      >
        <MenuItem onClick={onClose}>Profile</MenuItem>
        <MenuItem onClick={onClose}>My account</MenuItem>

        {/* New Upload Photo item */}
        <MenuItem onClick={handleUploadClick}>Upload Photo</MenuItem>

        <MenuItem onClick={onLogout}>Logout</MenuItem>
      </Menu>

      {/* Hidden file input to pick a photo */}
      <input
        type="file"
        ref={fileInputRef}
        style={{ display: "none" }}
        accept="image/*"
        onChange={handleFileChange}
      />
    </>
  );
};

// File: src/components/AppBar/TransparaAppBar.tsx
import React, { useState } from "react";
import {
  AppBar,
  Box,
  Toolbar,
  IconButton,
  Typography,
  Badge,
  MenuItem,
  Menu,
  InputBase,
  styled,
  alpha,
} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import AccountCircle from "@mui/icons-material/AccountCircle";
import MailIcon from "@mui/icons-material/Mail";
import NotificationsIcon from "@mui/icons-material/Notifications";
import MoreIcon from "@mui/icons-material/MoreVert";
import { useAuthState } from "react-firebase-hooks/auth"; // <-- Import from react-firebase-hooks
import { auth } from "../../firebase"; // <-- Your Firebase instance
import { ProfileMenu } from "./ProfileMenu";
import logo from "../../assets/logo.png";

// Constants
const NOTIFICATION_COUNTS = {
  MESSAGES: 4,
  NOTIFICATIONS: 17,
} as const;

// Types
interface AppBarProps {
  onLogout: () => Promise<void>;
}

// Styled Components
const Search = styled("div")(({ theme }) => ({
  position: "relative",
  borderRadius: theme.shape.borderRadius,
  backgroundColor: alpha(theme.palette.common.black, 0.05),
  "&:hover": {
    backgroundColor: alpha(theme.palette.common.black, 0.1),
  },
  marginRight: theme.spacing(2),
  marginLeft: 0,
  width: "100%",
  [theme.breakpoints.up("sm")]: {
    marginLeft: theme.spacing(3),
    width: "auto",
  },
}));

const SearchIconWrapper = styled("div")(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: "100%",
  position: "absolute",
  pointerEvents: "none",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
}));

const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: "inherit",
  "& .MuiInputBase-input": {
    padding: theme.spacing(1, 1, 1, 0),
    paddingLeft: `calc(1em + ${theme.spacing(4)})`,
    transition: theme.transitions.create("width"),
    width: "100%",
    [theme.breakpoints.up("md")]: {
      width: "20ch",
    },
  },
}));

export const TransparaAppBar: React.FC<AppBarProps> = ({ onLogout }) => {
  // Get the current user (so we can display user.photoURL)
  const [user] = useAuthState(auth);

  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] =
    useState<null | HTMLElement>(null);

  const isMenuOpen = Boolean(anchorEl);
  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);

  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMobileMenuClose = () => {
    setMobileMoreAnchorEl(null);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    handleMobileMenuClose();
  };

  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setMobileMoreAnchorEl(event.currentTarget);
  };

  const renderMobileMenu = (
    <Menu
      anchorEl={mobileMoreAnchorEl}
      anchorOrigin={{ vertical: "top", horizontal: "right" }}
      id="mobile-menu"
      keepMounted
      transformOrigin={{ vertical: "top", horizontal: "right" }}
      open={isMobileMenuOpen}
      onClose={handleMobileMenuClose}
    >
      <MenuItem>
        <IconButton size="large" aria-label="show new mails" color="inherit">
          <Badge badgeContent={NOTIFICATION_COUNTS.MESSAGES} color="error">
            <MailIcon />
          </Badge>
        </IconButton>
        <p>Messages</p>
      </MenuItem>
      <MenuItem>
        <IconButton
          size="large"
          aria-label="show new notifications"
          color="inherit"
        >
          <Badge badgeContent={NOTIFICATION_COUNTS.NOTIFICATIONS} color="error">
            <NotificationsIcon />
          </Badge>
        </IconButton>
        <p>Notifications</p>
      </MenuItem>
      <MenuItem onClick={handleProfileMenuOpen}>
        <IconButton
          size="large"
          aria-label="account of current user"
          aria-controls="primary-search-account-menu"
          aria-haspopup="true"
          color="inherit"
        >
          <AccountCircle />
        </IconButton>
        <p>Profile</p>
      </MenuItem>
    </Menu>
  );

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar
        position="static"
        sx={{
          backgroundColor: "white",
          boxShadow: "none",
          borderBottom: "1px solid #e0e0e0",
        }}
      >
        <Toolbar sx={{ display: "flex", justifyContent: "space-between" }}>
          {/* Left section */}
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              minWidth: "200px", // fixed width for the logo section
              marginLeft: "20px",
            }}
          >
            <img
              src={logo}
              alt="Transpara Logo"
              style={{
                height: "50px",
                marginRight: "8px",
              }}
            />
            <Typography
              variant="h6"
              noWrap
              component="div"
              sx={{
                display: { xs: "none", sm: "block" },
                color: "black",
                fontWeight: 500,
              }}
            >
              Transpara
            </Typography>
          </Box>

          {/* Center section - Search */}
          <Box
            sx={{
              flex: 1,
              display: "flex",
              justifyContent: "center",
              px: 2,
            }}
          >
            <Search
              sx={{
                flex: 1,
                maxWidth: "1200px",
                backgroundColor: "#f5f5f5",
                borderRadius: "8px",
              }}
            >
              <SearchIconWrapper>
                <SearchIcon sx={{ color: "#666" }} />
              </SearchIconWrapper>
              <StyledInputBase
                placeholder="Type to search"
                inputProps={{ "aria-label": "search" }}
                sx={{
                  color: "black",
                  width: "100%",
                  "& .MuiInputBase-input": {
                    width: "100%",
                  },
                }}
              />
            </Search>
          </Box>

          {/* Right section */}
          <Box
            sx={{
              display: "flex",
              gap: 1,
              minWidth: "200px", // fixed width for the actions section
              justifyContent: "flex-end",
              marginRight: "30px",
            }}
          >
            {/* Desktop icons */}
            <Box sx={{ display: { xs: "none", md: "flex" }, gap: 1 }}>
              <IconButton
                size="large"
                aria-label="show new items in cart"
                sx={{ color: "black" }}
              >
                <Badge badgeContent={2} color="error">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M4 4h2v2h14v-2h2v2h1v16h-20v-16h1v-2zm17 4h-16v12h16v-12zm-5 4h-6v-2h6v2z"
                      fill="currentColor"
                    />
                  </svg>
                </Badge>
              </IconButton>

              <IconButton
                size="large"
                aria-label="show notifications"
                sx={{ color: "black" }}
              >
                <NotificationsIcon />
              </IconButton>

              <IconButton
                size="large"
                edge="end"
                aria-label="account"
                aria-controls="primary-search-account-menu"
                aria-haspopup="true"
                onClick={handleProfileMenuOpen}
                sx={{
                  padding: 0,
                  "& img": {
                    borderRadius: "50%",
                    width: "48px",
                    height: "48px",
                    objectFit: "cover",
                    border: "2px solid #ccc",
                  },
                }}
              >
                {/* Show the user's photo if available, else placeholder */}
                <img
                  src={user?.photoURL || "https://via.placeholder.com/32"}
                  alt="Profile"
                />
              </IconButton>
            </Box>

            {/* Mobile menu icon */}
            <Box sx={{ display: { xs: "flex", md: "none" } }}>
              <IconButton
                size="large"
                aria-label="show more"
                aria-controls="mobile-menu"
                aria-haspopup="true"
                onClick={handleMobileMenuOpen}
                sx={{ color: "black" }}
              >
                <MoreIcon />
              </IconButton>
            </Box>
          </Box>
        </Toolbar>
      </AppBar>

      {/* Mobile Menu */}
      {renderMobileMenu}

      {/* Profile Menu */}
      <ProfileMenu
        anchorEl={anchorEl}
        isOpen={isMenuOpen}
        onClose={handleMenuClose}
        onLogout={onLogout}
      />
    </Box>
  );
};

// File: src/components/Auth/AuthPage.tsx
// src/components/Auth/AuthPage.tsx
import React, { useState } from "react";
import {
  Grid,
  Box,
  Typography,
  TextField,
  Button,
  CircularProgress,
  InputAdornment,
  IconButton,
} from "@mui/material";
import { auth } from "../../firebase";
import {
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  sendPasswordResetEmail,
} from "firebase/auth";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
import logo from "../../assets/logo.png";

const AuthPage: React.FC = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [isResetPassword, setIsResetPassword] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [username, setUsername] = useState("");
  const [company, setCompany] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null);
    setLoading(true);

    try {
      if (isLogin) {
        await signInWithEmailAndPassword(auth, email, password);
      } else {
        if (password !== confirmPassword) {
          setError("Passwords do not match");
          return;
        }
        await createUserWithEmailAndPassword(auth, email, password);
      }
    } catch (err: unknown) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unknown error occurred");
      }
    } finally {
      setLoading(false);
    }
  };

  const handleResetPasswordSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setError(null);
    setLoading(true);
    try {
      await sendPasswordResetEmail(auth, email);
      alert("Password reset email sent!");
      setIsResetPassword(false);
    } catch (err: unknown) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("An unknown error occurred");
      }
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <Box
        sx={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          height: "100vh",
        }}
      >
        <CircularProgress color="primary" />
      </Box>
    );
  }

  return (
    <Grid container sx={{ height: "100vh" }}>
      <Grid
        item
        xs={12}
        md={6}
        sx={{
          backgroundColor: "#fff",
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          p: 4,
        }}
      >
        {isResetPassword ? (
          <Box sx={{ width: "100%", maxWidth: 400 }}>
            <Typography variant="h4" align="center" sx={{ mb: 3 }}>
              Reset Password
            </Typography>

            {error && (
              <Typography color="error" align="center" sx={{ mb: 2 }}>
                {error}
              </Typography>
            )}
            <form onSubmit={handleResetPasswordSubmit}>
              <TextField
                fullWidth
                label="Email"
                variant="outlined"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                sx={{ mb: 2 }}
              />
              <Button
                type="submit"
                variant="contained"
                fullWidth
                sx={{
                  mb: 2,
                  backgroundColor: "black",
                  color: "white",
                  "&:hover": {
                    backgroundColor: "#333",
                  },
                }}
              >
                Reset
              </Button>
            </form>
            <Button
              fullWidth
              sx={{
                color: "black",
                backgroundColor: "transparent",
                "&:hover": {
                  backgroundColor: "transparent",
                  color: "#666",
                },
              }}
              onClick={() => setIsResetPassword(false)}
            >
              Back to Login
            </Button>
          </Box>
        ) : (
          <Box sx={{ width: "100%", maxWidth: 400 }}>
            <img
              src={logo}
              alt="Transpara Logo"
              style={{
                width: "70%",
                display: "block",
                margin: "0 auto",
              }}
            />
            <Typography variant="h4" align="center" sx={{ mb: 3 }}>
              {isLogin ? "Login" : "Sign Up"}
            </Typography>

            <Typography variant="subtitle1" align="center" sx={{ mb: 3 }}>
              Transpara is here to provide fair recruitment system!
            </Typography>

            {error && (
              <Typography color="error" align="center" sx={{ mb: 2 }}>
                {error}
              </Typography>
            )}

            <form onSubmit={handleSubmit}>
              {!isLogin && (
                <>
                  <TextField
                    fullWidth
                    label="First Name"
                    variant="outlined"
                    type="text"
                    value={firstName}
                    onChange={(e) => setFirstName(e.target.value)}
                    required
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    fullWidth
                    label="Last Name"
                    variant="outlined"
                    type="text"
                    value={lastName}
                    onChange={(e) => setLastName(e.target.value)}
                    required
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    fullWidth
                    label="Username"
                    variant="outlined"
                    type="text"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    required
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    fullWidth
                    label="Company"
                    variant="outlined"
                    type="text"
                    value={company}
                    onChange={(e) => setCompany(e.target.value)}
                    required
                    sx={{ mb: 2 }}
                  />
                  <TextField
                    fullWidth
                    label="Confirm Password"
                    variant="outlined"
                    type={showConfirmPassword ? "text" : "password"}
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    required
                    sx={{ mb: 2 }}
                    InputProps={{
                      endAdornment: (
                        <InputAdornment position="end">
                          <IconButton
                            onClick={() =>
                              setShowConfirmPassword(!showConfirmPassword)
                            }
                            edge="end"
                          >
                            {showConfirmPassword ? (
                              <VisibilityIcon />
                            ) : (
                              <VisibilityOffIcon />
                            )}
                          </IconButton>
                        </InputAdornment>
                      ),
                    }}
                  />
                </>
              )}

              <TextField
                fullWidth
                label="Email"
                variant="outlined"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                sx={{ mb: 2 }}
              />
              <TextField
                fullWidth
                label="Password"
                variant="outlined"
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                sx={{ mb: 2 }}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setShowPassword(!showPassword)}
                        edge="end"
                      >
                        {showPassword ? (
                          <VisibilityIcon />
                        ) : (
                          <VisibilityOffIcon />
                        )}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
              />
              {isLogin ? (
                <>
                  <Button
                    type="submit"
                    variant="contained"
                    fullWidth
                    sx={{
                      mb: 2,
                      backgroundColor: "black",
                      color: "white",
                      "&:hover": {
                        backgroundColor: "#333",
                      },
                    }}
                  >
                    Login
                  </Button>
                  <Button
                    fullWidth
                    onClick={() => setIsResetPassword(true)}
                    sx={{
                      textAlign: "right",
                      mb: 2,
                      color: "black",
                      backgroundColor: "transparent",
                      "&:hover": {
                        backgroundColor: "transparent",
                        color: "#666",
                      },
                    }}
                  >
                    Forgot Password?
                  </Button>
                </>
              ) : (
                <Button
                  type="submit"
                  variant="contained"
                  fullWidth
                  sx={{
                    mb: 2,
                    backgroundColor: "black",
                    color: "white",
                    "&:hover": {
                      backgroundColor: "#333",
                    },
                  }}
                >
                  Sign Up
                </Button>
              )}
            </form>

            <Button
              fullWidth
              sx={{
                color: "black",
                backgroundColor: "transparent",
                "&:hover": {
                  backgroundColor: "transparent",
                  color: "#666",
                },
              }}
              onClick={() => setIsLogin(!isLogin)}
            >
              {isLogin ? "Create an account" : "Already have an account? Login"}
            </Button>
          </Box>
        )}
      </Grid>

      <Grid
        item
        xs={12}
        md={6}
        sx={{
          backgroundImage: `url("https://images.unsplash.com/photo-1739820120366-b518d16785ed?q=80&w=3687&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")`,
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      />
    </Grid>
  );
};

export default AuthPage;

// File: src/components/Dashboard/Dashboard.tsx
// src/components/Dashboard/Dashboard.tsx
import React, { useState } from "react";
import { Box, Typography, Button } from "@mui/material";
import { TransparaAppBar } from "../AppBar/TransparaAppBar";
import { auth } from "../../firebase";
import { signOut } from "firebase/auth";
import { NewJobDialog } from "./NewJob"; // <-- We'll create this

const Dashboard: React.FC = () => {
  const [openNewJob, setOpenNewJob] = useState(false);

  const handleLogout = async () => {
    await signOut(auth);
  };

  return (
    <Box>
      <TransparaAppBar onLogout={handleLogout} />
      <Box sx={{ p: 3 }}>
        <Typography variant="h4" sx={{ mb: 2 }}>
          Dashboard Content
        </Typography>

        {/* Button to open the "New Job" dialog */}
        <Button
          variant="contained"
          onClick={() => setOpenNewJob(true)}
          sx={{
            backgroundColor: "black",
            "&:hover": {
              backgroundColor: "#333",
            },
          }}
        >
          New Job
        </Button>
      </Box>

      {/* Dialog for creating a new job */}
      <NewJobDialog open={openNewJob} onClose={() => setOpenNewJob(false)} />
    </Box>
  );
};

export default Dashboard;

// File: src/components/Dashboard/NewJob.tsx
// src/components/Dashboard/NewJobDialog.tsx
import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
} from "@mui/material";
import { db, auth } from "../../firebase";
import { addDoc, collection, Timestamp } from "firebase/firestore";

interface NewJobDialogProps {
  open: boolean;
  onClose: () => void;
}

export const NewJobDialog: React.FC<NewJobDialogProps> = ({
  open,
  onClose,
}) => {
  const [jobTitle, setJobTitle] = useState("");
  const [jobDescription, setJobDescription] = useState("");
  const [generatedLink, setGeneratedLink] = useState<string | null>(null);

  const handlePublish = async () => {
    if (!jobTitle.trim()) {
      alert("Job title is required!");
      return;
    }

    try {
      const user = auth.currentUser;
      if (!user) {
        alert("You must be logged in to create a job.");
        return;
      }

      // Create a new document with a custom ID (optional)
      const docRef = await addDoc(collection(db, "jobs"), {
        title: jobTitle,
        description: jobDescription || "",
        ownerUid: user.uid,
        createdAt: Timestamp.now(),
      });

      // Sanity check the document ID
      if (docRef.id.includes("/")) {
        throw new Error("Invalid document ID generated");
      }

      const link = `${window.location.origin}/apply/${docRef.id}`;
      setGeneratedLink(link);
    } catch (error) {
      console.error("Error creating job:", error);
      alert(`Failed to publish job: ${(error as Error).message}`);
    }
  };

  const handleCloseDialog = () => {
    setGeneratedLink(null); // reset link
    setJobTitle("");
    setJobDescription("");
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleCloseDialog} fullWidth maxWidth="sm">
      <DialogTitle>Create a New Job</DialogTitle>

      <DialogContent>
        {/* If we haven't published yet, show the form. Otherwise, show the link */}
        {generatedLink ? (
          <>
            <Typography variant="body1" sx={{ mb: 2 }}>
              Job Created! Share this link with applicants:
            </Typography>
            <Typography variant="body2" sx={{ mb: 2, wordBreak: "break-all" }}>
              {generatedLink}
            </Typography>
            <Button variant="contained" onClick={handleCloseDialog}>
              Done
            </Button>
          </>
        ) : (
          <>
            <TextField
              fullWidth
              label="Job Title"
              variant="outlined"
              value={jobTitle}
              onChange={(e) => setJobTitle(e.target.value)}
              sx={{ mb: 2 }}
            />
            <TextField
              fullWidth
              label="Job Description"
              variant="outlined"
              multiline
              rows={4}
              value={jobDescription}
              onChange={(e) => setJobDescription(e.target.value)}
              sx={{ mb: 2 }}
            />
          </>
        )}
      </DialogContent>

      {/* Only show actions if we haven't published yet */}
      {!generatedLink && (
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button variant="contained" onClick={handlePublish}>
            Publish
          </Button>
        </DialogActions>
      )}
    </Dialog>
  );
};

// File: src/utils/validation.ts
// src/utils/validation.ts
export const isValidFirestoreId = (id: string) => {
  // Firestore IDs must not contain forward slashes
  return id && !id.includes("/") && id.length > 0;
};

// File: src/pages/ApplyPage.tsx
// src/pages/ApplyPage.tsx
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { db } from "../firebase";
import {
  collection,
  doc,
  addDoc,
  getDoc,
  //   query,
  //   onSnapshot,
} from "firebase/firestore";
import { Box, Typography, TextField, Button } from "@mui/material";
// src/pages/ApplyPage.tsx
import { isValidFirestoreId } from "../utils/validation";

export const ApplyPage: React.FC = () => {
  const { jobId } = useParams();
  const [jobTitle, setJobTitle] = useState("");
  const [applicantName, setApplicantName] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchJob = async () => {
      if (!jobId || !isValidFirestoreId(jobId)) {
        setError("Invalid job ID");
        return;
      }
      try {
        const jobDoc = await getDoc(doc(db, "jobs", jobId));
        if (jobDoc.exists()) {
          setJobTitle(jobDoc.data().title);
        } else {
          setError("Job not found");
        }
      } catch {
        setError("Failed to fetch job details");
      }
    };
    fetchJob();
  }, [jobId]);

  const handleApply = async () => {
    if (!jobId || !isValidFirestoreId(jobId)) {
      setError("Invalid job ID");
      return;
    }
    try {
      await addDoc(collection(db, "jobs", jobId, "applications"), {
        name: applicantName,
        appliedAt: new Date(),
      });
      alert("Application submitted!");
    } catch {
      setError("Failed to submit application");
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      {error ? (
        <Typography color="error">{error}</Typography>
      ) : (
        <>
          <Typography variant="h5">Apply for: {jobTitle}</Typography>
          <TextField
            label="Your Name"
            value={applicantName}
            onChange={(e) => setApplicantName(e.target.value)}
            sx={{ mt: 2, mb: 2 }}
            fullWidth
          />
          <Button variant="contained" onClick={handleApply}>
            Submit Application
          </Button>
        </>
      )}
    </Box>
  );
};

// File: src/App.tsx
// src/App.tsx
import React from "react";
import AuthPage from "./components/Auth/AuthPage";
import Dashboard from "./components/Dashboard/Dashboard";
import { auth } from "./firebase";
import { useAuthState } from "react-firebase-hooks/auth";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import { ApplyPage } from "./pages/ApplyPage";

function App() {
  const [user] = useAuthState(auth);

  return (
    <Router>
      <Routes>
        {/* If user is logged in, go to Dashboard, otherwise show Auth Page */}
        <Route path="/" element={user ? <Dashboard /> : <AuthPage />} />

        {/* Applicant Job Application Page */}
        <Route path="/apply/:jobId" element={<ApplyPage />} />

        {/* Redirect unknown paths to home */}
        <Route path="*" element={<Navigate to="/" />} />
      </Routes>
    </Router>
  );
}

export default App;

// File: src/firebase.ts
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
  apiKey: "AIzaSyDilwouDtny-U9VaGkg7HRwsOpg4bLoTQg",
  authDomain: "transpara-b2266.firebaseapp.com",
  projectId: "transpara-b2266",
  storageBucket: "transpara-b2266.firebasestorage.com",
  messagingSenderId: "345304537780",
  appId: "1:345304537780:web:5b8b5fd75b8485f59c95e1",
  measurementId: "G-5Y1TJJYC1J",
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

export const auth = getAuth(app);
export const db = getFirestore(app);
export default app;

